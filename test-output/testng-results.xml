<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="3" ignored="0" total="42" passed="38" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-13T13:08:17 SELČ" name="Suite" finished-at="2025-07-13T13:18:47 SELČ" duration-ms="630637">
    <groups>
    </groups>
    <test started-at="2025-07-13T13:08:17 SELČ" name="Test" finished-at="2025-07-13T13:18:47 SELČ" duration-ms="630637">
      <class name="tests.negativeTests.LoginInvalidTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:26 SELČ" name="setup" finished-at="2025-07-13T13:13:28 SELČ" duration-ms="1727" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:28 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:29 SELČ" duration-ms="986" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[djf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with valid email + too short password]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@114b28ee]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:29 SELČ" name="tearDown" finished-at="2025-07-13T13:13:29 SELČ" duration-ms="98" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:29 SELČ" name="setup" finished-at="2025-07-13T13:13:31 SELČ" duration-ms="1694" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:31 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:32 SELČ" duration-ms="887" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with valid email + empty password]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@95ae532]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:32 SELČ" name="tearDown" finished-at="2025-07-13T13:13:32 SELČ" duration-ms="99" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:32 SELČ" name="setup" finished-at="2025-07-13T13:13:34 SELČ" duration-ms="1791" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:34 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:34 SELČ" duration-ms="909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test1234!]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with empty email + valid password]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@454706f2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:34 SELČ" name="tearDown" finished-at="2025-07-13T13:13:35 SELČ" duration-ms="107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:35 SELČ" name="setup" finished-at="2025-07-13T13:13:36 SELČ" duration-ms="1754" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:36 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:37 SELČ" duration-ms="889" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veron@tes.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1254]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with invalid email format + invalid too short password]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@6df09fb3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:37 SELČ" name="tearDown" finished-at="2025-07-13T13:13:37 SELČ" duration-ms="99" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:37 SELČ" name="setup" finished-at="2025-07-13T13:13:39 SELČ" duration-ms="1692" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:39 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:40 SELČ" duration-ms="850" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with empty credentials]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@313cdbb1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:40 SELČ" name="tearDown" finished-at="2025-07-13T13:13:40 SELČ" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:40 SELČ" name="setup" finished-at="2025-07-13T13:13:43 SELČ" duration-ms="2831" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:43 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:44 SELČ" duration-ms="963" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with valid email + too long password]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@72026301]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:44 SELČ" name="tearDown" finished-at="2025-07-13T13:13:44 SELČ" duration-ms="109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:44 SELČ" name="setup" finished-at="2025-07-13T13:13:46 SELČ" duration-ms="1747" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:46 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:47 SELČ" duration-ms="949" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[PasswordOnly]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with valid email + password missing digits]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@6bf46b0d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:47 SELČ" name="tearDown" finished-at="2025-07-13T13:13:47 SELČ" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:47 SELČ" name="setup" finished-at="2025-07-13T13:13:48 SELČ" duration-ms="1767" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:48 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:50 SELČ" duration-ms="1184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Login with valid email + password missing letters]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@a8f1719]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:50 SELČ" name="tearDown" finished-at="2025-07-13T13:13:50 SELČ" duration-ms="107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:50 SELČ" name="setup" finished-at="2025-07-13T13:13:51 SELČ" duration-ms="1603" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:51 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:52 SELČ" duration-ms="878" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[        ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Valid email + password with only spaces]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@60beeead]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:52 SELČ" name="tearDown" finished-at="2025-07-13T13:13:52 SELČ" duration-ms="90" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:52 SELČ" name="setup" finished-at="2025-07-13T13:13:54 SELČ" duration-ms="1952" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:54 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:55 SELČ" duration-ms="891" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[!@#$%^&*]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Valid email + password with only special characters]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@107d6bd8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:55 SELČ" name="tearDown" finished-at="2025-07-13T13:13:55 SELČ" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:55 SELČ" name="setup" finished-at="2025-07-13T13:13:57 SELČ" duration-ms="1894" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithInvalidCredentialsTest(java.lang.String,java.lang.String,java.lang.String,[Ljava.lang.String;)[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:57 SELČ" name="loginWithInvalidCredentialsTest" description="Login with invalid or empty credentials" data-provider="invalidLoginData" finished-at="2025-07-13T13:13:58 SELČ" duration-ms="897" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[veronika.test9@test.sk]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tes t12! ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Valid email + password with space inside]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[[Ljava.lang.String;@3ac620ef]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidCredentialsTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.negativeTests.LoginInvalidTests@47874b25]" started-at="2025-07-13T13:13:58 SELČ" name="tearDown" finished-at="2025-07-13T13:13:58 SELČ" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.negativeTests.LoginInvalidTests -->
      <class name="tests.positiveTests.EndToEndShoppingFlowAfterLoginTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:03 SELČ" name="setup" finished-at="2025-07-13T13:16:08 SELČ" duration-ms="4819" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="checkConfirmOrderDetailsAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:08 SELČ" name="checkConfirmOrderDetailsAfterLogin" description="Confirm order details" finished-at="2025-07-13T13:16:25 SELČ" duration-ms="16903" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkConfirmOrderDetailsAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:25 SELČ" name="tearDown" finished-at="2025-07-13T13:16:26 SELČ" duration-ms="636" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:26 SELČ" name="setup" finished-at="2025-07-13T13:16:50 SELČ" duration-ms="24425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="selectPaymentMethodAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:50 SELČ" name="selectPaymentMethodAfterLogin" description="Payment method selection" finished-at="2025-07-13T13:16:55 SELČ" duration-ms="5373" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectPaymentMethodAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:55 SELČ" name="tearDown" finished-at="2025-07-13T13:16:56 SELČ" duration-ms="860" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:16:56 SELČ" name="setup" finished-at="2025-07-13T13:17:02 SELČ" duration-ms="5573" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="selectShippingMethodAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:02 SELČ" name="selectShippingMethodAfterLogin" description="Shipping method selection" finished-at="2025-07-13T13:17:07 SELČ" duration-ms="4642" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectShippingMethodAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:07 SELČ" name="tearDown" finished-at="2025-07-13T13:17:07 SELČ" duration-ms="674" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:07 SELČ" name="setup" finished-at="2025-07-13T13:17:13 SELČ" duration-ms="5399" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="shouldDisplayCorrectProductDetailsAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:13 SELČ" name="shouldDisplayCorrectProductDetailsAfterLogin" description="Check shopping cart details after login" finished-at="2025-07-13T13:17:14 SELČ" duration-ms="1557" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayCorrectProductDetailsAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:14 SELČ" name="tearDown" finished-at="2025-07-13T13:17:15 SELČ" duration-ms="792" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:15 SELČ" name="setup" finished-at="2025-07-13T13:17:21 SELČ" duration-ms="5598" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="shouldEstimateShippingAndDisplayCorrectTotalsAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:21 SELČ" name="shouldEstimateShippingAndDisplayCorrectTotalsAfterLogin" description="Estimate shipping and check totals after login" finished-at="2025-07-13T13:17:23 SELČ" duration-ms="2846" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEstimateShippingAndDisplayCorrectTotalsAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:23 SELČ" name="tearDown" finished-at="2025-07-13T13:17:24 SELČ" duration-ms="680" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:24 SELČ" name="setup" finished-at="2025-07-13T13:17:30 SELČ" duration-ms="5525" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="shouldVerifyPrefilledBillingFieldsAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:30 SELČ" name="shouldVerifyPrefilledBillingFieldsAfterLogin" description="Billing information" finished-at="2025-07-13T13:17:33 SELČ" duration-ms="3465" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldVerifyPrefilledBillingFieldsAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:33 SELČ" name="tearDown" finished-at="2025-07-13T13:17:34 SELČ" duration-ms="755" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:34 SELČ" name="setup" finished-at="2025-07-13T13:17:39 SELČ" duration-ms="4782" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSubmitOrderAndCheckoutUrl()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:39 SELČ" name="testSubmitOrderAndCheckoutUrl" description="Submit order and check checkout URL" finished-at="2025-07-13T13:17:41 SELČ" duration-ms="2791" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubmitOrderAndCheckoutUrl -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:41 SELČ" name="tearDown" finished-at="2025-07-13T13:17:42 SELČ" duration-ms="616" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:42 SELČ" name="setup" finished-at="2025-07-13T13:17:47 SELČ" duration-ms="5013" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyOrderCompletionAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:17:47 SELČ" name="verifyOrderCompletionAfterLogin" description="Order completion" finished-at="2025-07-13T13:18:05 SELČ" duration-ms="17534" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyOrderCompletionAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:05 SELČ" name="tearDown" finished-at="2025-07-13T13:18:06 SELČ" duration-ms="1004" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:06 SELČ" name="setup" finished-at="2025-07-13T13:18:31 SELČ" duration-ms="25392" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPaymentInformationAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:31 SELČ" name="verifyPaymentInformationAfterLogin" description="Payment information verification" finished-at="2025-07-13T13:18:37 SELČ" duration-ms="6078" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentInformationAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:37 SELČ" name="tearDown" finished-at="2025-07-13T13:18:38 SELČ" duration-ms="772" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:38 SELČ" name="setup" finished-at="2025-07-13T13:18:43 SELČ" duration-ms="4869" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPrefilledShippingInformationAfterLogin()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:43 SELČ" name="verifyPrefilledShippingInformationAfterLogin" description="Shipping information" finished-at="2025-07-13T13:18:47 SELČ" duration-ms="3964" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPrefilledShippingInformationAfterLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterLoginTest@5db4c359]" started-at="2025-07-13T13:18:47 SELČ" name="tearDown" finished-at="2025-07-13T13:18:47 SELČ" duration-ms="612" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.positiveTests.EndToEndShoppingFlowAfterLoginTest -->
      <class name="tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:05 SELČ" name="setup" finished-at="2025-07-13T13:14:10 SELČ" duration-ms="4967" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="checkConfirmOrderDetailsAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:10 SELČ" name="checkConfirmOrderDetailsAfterRegistration" description="Confirm order details content" finished-at="2025-07-13T13:14:28 SELČ" duration-ms="17813" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkConfirmOrderDetailsAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:28 SELČ" name="tearDown" finished-at="2025-07-13T13:14:28 SELČ" duration-ms="665" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:28 SELČ" name="setup" finished-at="2025-07-13T13:14:33 SELČ" duration-ms="4593" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="selectPaymentMethodAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:33 SELČ" name="selectPaymentMethodAfterRegistration" description="Payment method selection after user registration" finished-at="2025-07-13T13:14:39 SELČ" duration-ms="5815" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectPaymentMethodAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:39 SELČ" name="tearDown" finished-at="2025-07-13T13:14:39 SELČ" duration-ms="644" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:39 SELČ" name="setup" finished-at="2025-07-13T13:14:45 SELČ" duration-ms="5492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="selectShippingMethodAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:45 SELČ" name="selectShippingMethodAfterRegistration" description="User selects shipping method" finished-at="2025-07-13T13:14:50 SELČ" duration-ms="5209" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectShippingMethodAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:50 SELČ" name="tearDown" finished-at="2025-07-13T13:14:51 SELČ" duration-ms="615" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:51 SELČ" name="setup" finished-at="2025-07-13T13:14:55 SELČ" duration-ms="4733" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="shouldDisplayCorrectProductDetailsAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:55 SELČ" name="shouldDisplayCorrectProductDetailsAfterRegistration" description="Check shopping cart details after user registration" finished-at="2025-07-13T13:14:57 SELČ" duration-ms="1542" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayCorrectProductDetailsAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:57 SELČ" name="tearDown" finished-at="2025-07-13T13:14:57 SELČ" duration-ms="601" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:14:57 SELČ" name="setup" finished-at="2025-07-13T13:15:02 SELČ" duration-ms="4553" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="shouldEstimateShippingAndDisplayCorrectTotalsAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:02 SELČ" name="shouldEstimateShippingAndDisplayCorrectTotalsAfterRegistration" description="Estimate shipping and check totals after user registration" finished-at="2025-07-13T13:15:06 SELČ" duration-ms="3604" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEstimateShippingAndDisplayCorrectTotalsAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:06 SELČ" name="tearDown" finished-at="2025-07-13T13:15:06 SELČ" duration-ms="648" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:06 SELČ" name="setup" finished-at="2025-07-13T13:15:11 SELČ" duration-ms="5186" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="shouldVerifyPrefilledBillingFieldsAndEnterRemainingInformationAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:11 SELČ" name="shouldVerifyPrefilledBillingFieldsAndEnterRemainingInformationAfterRegistration" description="Billing information after user registration" finished-at="2025-07-13T13:15:17 SELČ" duration-ms="5238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldVerifyPrefilledBillingFieldsAndEnterRemainingInformationAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:17 SELČ" name="tearDown" finished-at="2025-07-13T13:15:17 SELČ" duration-ms="659" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:17 SELČ" name="setup" finished-at="2025-07-13T13:15:22 SELČ" duration-ms="4808" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyOrderCompletionAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:22 SELČ" name="verifyOrderCompletionAfterRegistration" description="Order completion after user registration" finished-at="2025-07-13T13:15:40 SELČ" duration-ms="17514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyOrderCompletionAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:40 SELČ" name="tearDown" finished-at="2025-07-13T13:15:40 SELČ" duration-ms="753" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:40 SELČ" name="setup" finished-at="2025-07-13T13:15:45 SELČ" duration-ms="4769" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPaymentInformationAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:45 SELČ" name="verifyPaymentInformationAfterRegistration" description="Verify payment info content" finished-at="2025-07-13T13:15:52 SELČ" duration-ms="6766" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPaymentInformationAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:52 SELČ" name="tearDown" finished-at="2025-07-13T13:15:53 SELČ" duration-ms="891" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:53 SELČ" name="setup" finished-at="2025-07-13T13:15:58 SELČ" duration-ms="4861" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyPrefilledShippingInformationAfterRegistration()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:15:58 SELČ" name="verifyPrefilledShippingInformationAfterRegistration" description="Shipping information after user registration" finished-at="2025-07-13T13:16:03 SELČ" duration-ms="4954" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPrefilledShippingInformationAfterRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest@2c177f9e]" started-at="2025-07-13T13:16:03 SELČ" name="tearDown" finished-at="2025-07-13T13:16:03 SELČ" duration-ms="621" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.positiveTests.EndToEndShoppingFlowAfterRegistrationTest -->
      <class name="tests.negativeTests.RegisterInvalidTests">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:08:22 SELČ" name="setup" finished-at="2025-07-13T13:08:24 SELČ" duration-ms="2090" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method retried="true" signature="registerWithEmptyConfirmPasswordField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:08:24 SELČ" name="registerWithEmptyConfirmPasswordField" description="Registration with empty confirmpassword field" finished-at="2025-07-13T13:08:55 SELČ" duration-ms="31286" status="SKIP">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at demowebshop.base.BasePage.waitForElementToBeVisible(BasePage.java:63)
at pages.RegisterPage.getConfirmPasswordWarningMessageText(RegisterPage.java:184)
at tests.negativeTests.RegisterInvalidTests.registerWithEmptyConfirmPasswordField(RegisterInvalidTests.java:188)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"span[data-valmsg-for='ConfirmPassword'] > span"}
  (Session info: chrome=138.0.7204.101)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [9fa95a6701a7f0491975c16a5f68f777, findElement {using=css selector, value=span[data-valmsg-for='ConfirmPassword'] > span}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.101, chrome: {chromedriverVersion: 138.0.7204.94 (545025748884..., userDataDir: C:\Users\Veronika\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51500}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51500/devtoo..., se:cdpVersion: 138.0.7204.101, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 9fa95a6701a7f0491975c16a5f68f777
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy29.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 29 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyConfirmPasswordField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:08:55 SELČ" name="setup" finished-at="2025-07-13T13:08:57 SELČ" duration-ms="2215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method retried="true" signature="registerWithEmptyConfirmPasswordField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:08:57 SELČ" name="registerWithEmptyConfirmPasswordField" description="Registration with empty confirmpassword field" finished-at="2025-07-13T13:09:29 SELČ" duration-ms="31349" status="SKIP">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at demowebshop.base.BasePage.waitForElementToBeVisible(BasePage.java:63)
at pages.RegisterPage.getConfirmPasswordWarningMessageText(RegisterPage.java:184)
at tests.negativeTests.RegisterInvalidTests.registerWithEmptyConfirmPasswordField(RegisterInvalidTests.java:188)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"span[data-valmsg-for='ConfirmPassword'] > span"}
  (Session info: chrome=138.0.7204.101)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8ea835b5af44aef96535c84d086bd805, findElement {using=css selector, value=span[data-valmsg-for='ConfirmPassword'] > span}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.101, chrome: {chromedriverVersion: 138.0.7204.94 (545025748884..., userDataDir: C:\Users\Veronika\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51525}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51525/devtoo..., se:cdpVersion: 138.0.7204.101, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8ea835b5af44aef96535c84d086bd805
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy29.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 29 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyConfirmPasswordField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:09:29 SELČ" name="setup" finished-at="2025-07-13T13:09:31 SELČ" duration-ms="2066" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method retried="true" signature="registerWithEmptyConfirmPasswordField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:09:31 SELČ" name="registerWithEmptyConfirmPasswordField" description="Registration with empty confirmpassword field" finished-at="2025-07-13T13:10:02 SELČ" duration-ms="31347" status="SKIP">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at demowebshop.base.BasePage.waitForElementToBeVisible(BasePage.java:63)
at pages.RegisterPage.getConfirmPasswordWarningMessageText(RegisterPage.java:184)
at tests.negativeTests.RegisterInvalidTests.registerWithEmptyConfirmPasswordField(RegisterInvalidTests.java:188)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"span[data-valmsg-for='ConfirmPassword'] > span"}
  (Session info: chrome=138.0.7204.101)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [e26c701dad6dd315ae3f7f717f8c89bf, findElement {using=css selector, value=span[data-valmsg-for='ConfirmPassword'] > span}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.101, chrome: {chromedriverVersion: 138.0.7204.94 (545025748884..., userDataDir: C:\Users\Veronika\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51558}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51558/devtoo..., se:cdpVersion: 138.0.7204.101, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: e26c701dad6dd315ae3f7f717f8c89bf
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy29.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 29 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyConfirmPasswordField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:10:02 SELČ" name="setup" finished-at="2025-07-13T13:10:05 SELČ" duration-ms="2293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithEmptyConfirmPasswordField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:10:05 SELČ" name="registerWithEmptyConfirmPasswordField" description="Registration with empty confirmpassword field" finished-at="2025-07-13T13:10:36 SELČ" duration-ms="31225" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[data-valmsg-for='ConfirmPassword'] > span' (tried for 10 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at demowebshop.base.BasePage.waitForElementToBeVisible(BasePage.java:63)
at pages.RegisterPage.getConfirmPasswordWarningMessageText(RegisterPage.java:184)
at tests.negativeTests.RegisterInvalidTests.registerWithEmptyConfirmPasswordField(RegisterInvalidTests.java:188)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"span[data-valmsg-for='ConfirmPassword'] > span"}
  (Session info: chrome=138.0.7204.101)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [8c69df5c88856de65c7167221de313a5, findElement {using=css selector, value=span[data-valmsg-for='ConfirmPassword'] > span}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.101, chrome: {chromedriverVersion: 138.0.7204.94 (545025748884..., userDataDir: C:\Users\Veronika\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:51590}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51590/devtoo..., se:cdpVersion: 138.0.7204.101, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 8c69df5c88856de65c7167221de313a5
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy29.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 29 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyConfirmPasswordField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:10:36 SELČ" name="setup" finished-at="2025-07-13T13:10:38 SELČ" duration-ms="2003" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithEmptyCredentials()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:10:38 SELČ" name="registerWithEmptyCredentials" description="Test with empty credentials" finished-at="2025-07-13T13:10:38 SELČ" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyCredentials -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:10:38 SELČ" name="setup" finished-at="2025-07-13T13:10:41 SELČ" duration-ms="2422" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithEmptyEmailField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:10:41 SELČ" name="registerWithEmptyEmailField" description="Registration with empty email field" finished-at="2025-07-13T13:11:21 SELČ" duration-ms="40754" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyEmailField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:11:21 SELČ" name="setup" finished-at="2025-07-13T13:11:24 SELČ" duration-ms="3054" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithEmptyFirstNameField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:11:24 SELČ" name="registerWithEmptyFirstNameField" description="Registration with empty firstname field" finished-at="2025-07-13T13:12:05 SELČ" duration-ms="40897" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyFirstNameField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:12:05 SELČ" name="setup" finished-at="2025-07-13T13:12:09 SELČ" duration-ms="3313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithEmptyLastNameField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:12:09 SELČ" name="registerWithEmptyLastNameField" description="Registration with empty lastname field" finished-at="2025-07-13T13:12:49 SELČ" duration-ms="40825" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyLastNameField -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:12:49 SELČ" name="setup" finished-at="2025-07-13T13:12:52 SELČ" duration-ms="2302" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="registerWithEmptyPasswordField()[pri:0, instance:tests.negativeTests.RegisterInvalidTests@1fc0053e]" started-at="2025-07-13T13:12:52 SELČ" name="registerWithEmptyPasswordField" description="Registration with empty password field" finished-at="2025-07-13T13:13:23 SELČ" duration-ms="30845" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerWithEmptyPasswordField -->
      </class> <!-- tests.negativeTests.RegisterInvalidTests -->
      <class name="tests.positiveTests.AddProductToCartAfterLoginTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.AddProductToCartAfterLoginTest@33617539]" started-at="2025-07-13T13:13:58 SELČ" name="setup" finished-at="2025-07-13T13:14:02 SELČ" duration-ms="3836" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="addOneProductToCart_ValidProduct()[pri:0, instance:tests.positiveTests.AddProductToCartAfterLoginTest@33617539]" started-at="2025-07-13T13:14:02 SELČ" name="addOneProductToCart_ValidProduct" description="Add one valid product with id 13 to cart after login" finished-at="2025-07-13T13:14:03 SELČ" duration-ms="1117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addOneProductToCart_ValidProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.positiveTests.AddProductToCartAfterLoginTest@33617539]" started-at="2025-07-13T13:14:03 SELČ" name="tearDown" finished-at="2025-07-13T13:14:05 SELČ" duration-ms="1685" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.positiveTests.AddProductToCartAfterLoginTest -->
      <class name="tests.positiveTests.RegisterValidTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.RegisterValidTest@3f23a3a0]" started-at="2025-07-13T13:08:17 SELČ" name="setup" finished-at="2025-07-13T13:08:19 SELČ" duration-ms="2499" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testValidRegistration()[pri:0, instance:tests.positiveTests.RegisterValidTest@3f23a3a0]" started-at="2025-07-13T13:08:19 SELČ" name="testValidRegistration" description="Valid user registration with correct data" finished-at="2025-07-13T13:08:21 SELČ" duration-ms="2118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidRegistration -->
        <test-method is-config="true" signature="logout()[pri:0, instance:tests.positiveTests.RegisterValidTest@3f23a3a0]" started-at="2025-07-13T13:08:21 SELČ" name="logout" finished-at="2025-07-13T13:08:22 SELČ" duration-ms="633" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
      </class> <!-- tests.positiveTests.RegisterValidTest -->
      <class name="tests.positiveTests.LoginPositiveTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.positiveTests.LoginPositiveTest@290b1b2e]" started-at="2025-07-13T13:13:23 SELČ" name="setup" finished-at="2025-07-13T13:13:24 SELČ" duration-ms="1818" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginWithValidCredentialsShouldSucceed()[pri:0, instance:tests.positiveTests.LoginPositiveTest@290b1b2e]" started-at="2025-07-13T13:13:24 SELČ" name="loginWithValidCredentialsShouldSucceed" description="Valid user login with correct data" finished-at="2025-07-13T13:13:26 SELČ" duration-ms="1192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidCredentialsShouldSucceed -->
        <test-method is-config="true" signature="logoutLoggedUser()[pri:0, instance:tests.positiveTests.LoginPositiveTest@290b1b2e]" started-at="2025-07-13T13:13:26 SELČ" name="logoutLoggedUser" finished-at="2025-07-13T13:13:26 SELČ" duration-ms="644" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logoutLoggedUser -->
      </class> <!-- tests.positiveTests.LoginPositiveTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
